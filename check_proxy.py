import requests
import concurrent.futures
from typing import List, Dict, Tuple
import time
import os

PROXY_FILE = "C:\\Users\\NAVI\\PycharmProjects\\MosRu\\pr.txt"
TEST_URL = "https://httpbin.org/ip"  # HTTPS –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å HTTPS —Å–∞–π—Ç–∞–º–∏
TIMEOUT = 15  # –£–≤–µ–ª–∏—á–∏–ª —Ç–∞–π–º–∞—É—Ç –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
MAX_WORKERS = 500  # –£–≤–µ–ª–∏—á–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"


def load_proxies(file_path: str) -> List[Dict]:
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞ –∏ –ø–∞—Ä—Å–∏–º –∏—Ö"""
    proxies = []
    if not os.path.exists(file_path):
        return proxies

    with open(file_path, 'r') as f:
        for line in f:
            line = line.strip()
            if not line:
                continue

            parts = line.split(':')
            proxy = {
                'ip': parts[0],
                'port': parts[1],
                'auth': None
            }

            if len(parts) >= 4:  # –ï—Å–ª–∏ –µ—Å—Ç—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å
                proxy['auth'] = {
                    'username': parts[2],
                    'password': parts[3]
                }

            proxies.append(proxy)

    return proxies


def check_proxy(proxy: Dict) -> Tuple[Dict, bool, float]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–¥–∏–Ω –ø—Ä–æ–∫—Å–∏ —Å –∑–∞–º–µ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞"""
    proxy_str = f"{proxy['ip']}:{proxy['port']}"
    if proxy['auth']:
        proxy_str = f"{proxy['auth']['username']}:{proxy['auth']['password']}@{proxy_str}"

    proxies_config = {
        "http": f"http://{proxy_str}",
        "https": f"http://{proxy_str}"
    }

    start_time = time.time()
    try:
        response = requests.get(
            TEST_URL,
            proxies=proxies_config,
            headers={"User-Agent": USER_AGENT},
            timeout=TIMEOUT
        )
        response_time = round((time.time() - start_time) * 1000)  # –í –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

        if response.status_code == 200:
            return (proxy, True, response_time)
    except Exception as e:
        response_time = round((time.time() - start_time) * 1000)

    return (proxy, False, response_time)


def check_all_proxies(proxies: List[Dict]) -> List[Dict]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø—Ä–æ–∫—Å–∏ —Å –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å—é"""
    results = []
    valid_count = 0

    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {len(proxies)} –ø—Ä–æ–∫—Å–∏...\n")

    with concurrent.futures.ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:
        futures = [executor.submit(check_proxy, proxy) for proxy in proxies]

        for i, future in enumerate(concurrent.futures.as_completed(futures)):
            proxy, is_valid, response_time = future.result()

            if is_valid:
                valid_count += 1
                status = "‚úÖ –†–ê–ë–û–ß–ò–ô"
                color = "\033[92m"  # –ó–µ–ª–µ–Ω—ã–π
            else:
                status = "‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
                color = "\033[91m"  # –ö—Ä–∞—Å–Ω—ã–π

            # –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞
            auth_info = ""
            if proxy['auth']:
                auth_info = f" | üë§ {proxy['auth']['username']}:{'*' * len(proxy['auth']['password'])}"

            print(f"{color}{status}\033[0m | {proxy['ip']}:{proxy['port']}{auth_info} | ‚è± {response_time}ms")

            if is_valid:
                results.append({
                    'proxy': proxy,
                    'response_time': response_time
                })

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"üîπ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(proxies)}")
    print(f"üîπ –†–∞–±–æ—á–∏—Ö: {valid_count} ")
    print(f"üîπ –ù–µ —Ä–∞–±–æ—á–∏—Ö: {len(proxies) - valid_count}")

    return results


def save_valid_proxies(valid_proxies: List[Dict]):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–∞–π–ª"""
    with open(PROXY_FILE, 'w') as f:
        for item in valid_proxies:
            proxy = item['proxy']
            if proxy['auth']:
                line = f"{proxy['ip']}:{proxy['port']}:{proxy['auth']['username']}:{proxy['auth']['password']}\n"
            else:
                line = f"{proxy['ip']}:{proxy['port']}\n"
            f.write(line)

    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(valid_proxies)} —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–∞–π–ª {PROXY_FILE}")


def main():
    print("=== üî• –ü–†–û–ö–°–ò –ß–ï–ö–ï–† (—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π) ===")
    print("=== –î–ª—è –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ —Å –ª–æ–≥–∏–Ω–æ–º/–ø–∞—Ä–æ–ª–µ–º ===\n")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∫—Å–∏
    proxies = load_proxies(PROXY_FILE)
    if not proxies:
        print(f"–§–∞–π–ª {PROXY_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç!")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏
    valid_proxies = check_all_proxies(proxies)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if valid_proxies:
        save_valid_proxies(valid_proxies)

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏
        fast_proxies = sorted(valid_proxies, key=lambda x: x['response_time'])[:5]
        print("\nüöÄ –¢–æ–ø-5 —Å–∞–º—ã—Ö –±—ã—Å—Ç—Ä—ã—Ö –ø—Ä–æ–∫—Å–∏:")
        for i, item in enumerate(fast_proxies, 1):
            proxy = item['proxy']
            print(f"{i}. {proxy['ip']}:{proxy['port']} ({item['response_time']}ms)")
    else:
        print("\nüò¢ –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ–∫—Å–∏")


if __name__ == "__main__":
    main()